// Package file_storage provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package file_storage

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	JwtScopes = "jwt.Scopes"
)

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// FileInfo defines model for FileInfo.
type FileInfo struct {
	// Id id файла
	Id string `json:"id"`

	// Size размер файла
	Size int `json:"size"`
}

// AuthLoginJSONBody defines parameters for AuthLogin.
type AuthLoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// AuthRefreshTokenJSONBody defines parameters for AuthRefreshToken.
type AuthRefreshTokenJSONBody struct {
	RefreshToken string `json:"refreshToken"`
}

// FileUploadMultipartBody defines parameters for FileUpload.
type FileUploadMultipartBody struct {
	File openapi_types.File `json:"file"`
}

// FileUploadParams defines parameters for FileUpload.
type FileUploadParams struct {
	// Filepath путь по которому будет сохранён файл
	Filepath string `form:"filepath" json:"filepath"`
}

// FileUpdateMultipartBody defines parameters for FileUpdate.
type FileUpdateMultipartBody struct {
	File     *openapi_types.File `json:"file,omitempty"`
	Metadata *map[string]string  `json:"metadata,omitempty"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody AuthLoginJSONBody

// AuthRefreshTokenJSONRequestBody defines body for AuthRefreshToken for application/json ContentType.
type AuthRefreshTokenJSONRequestBody AuthRefreshTokenJSONBody

// FileUploadMultipartRequestBody defines body for FileUpload for multipart/form-data ContentType.
type FileUploadMultipartRequestBody FileUploadMultipartBody

// FileUpdateMultipartRequestBody defines body for FileUpdate for multipart/form-data ContentType.
type FileUpdateMultipartRequestBody FileUpdateMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Авторизация пользователя
	// (POST /auth/login)
	AuthLogin(w http.ResponseWriter, r *http.Request)
	// Обновить токен
	// (POST /auth/refresh)
	AuthRefreshToken(w http.ResponseWriter, r *http.Request)
	// Скачать файл
	// (GET /file/download/{fileId})
	FileDownload(w http.ResponseWriter, r *http.Request, fileId string)
	// Добавить файл
	// (POST /file/upload)
	FileUpload(w http.ResponseWriter, r *http.Request, params FileUploadParams)
	// Удалить файл
	// (DELETE /file/{fileId})
	FileDelete(w http.ResponseWriter, r *http.Request, fileId string)
	// Получить информацию о файле
	// (GET /file/{fileId})
	FileGet(w http.ResponseWriter, r *http.Request, fileId string)
	// Обновить файл
	// (PUT /file/{fileId})
	FileUpdate(w http.ResponseWriter, r *http.Request, fileId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Авторизация пользователя
// (POST /auth/login)
func (_ Unimplemented) AuthLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновить токен
// (POST /auth/refresh)
func (_ Unimplemented) AuthRefreshToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Скачать файл
// (GET /file/download/{fileId})
func (_ Unimplemented) FileDownload(w http.ResponseWriter, r *http.Request, fileId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Добавить файл
// (POST /file/upload)
func (_ Unimplemented) FileUpload(w http.ResponseWriter, r *http.Request, params FileUploadParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Удалить файл
// (DELETE /file/{fileId})
func (_ Unimplemented) FileDelete(w http.ResponseWriter, r *http.Request, fileId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить информацию о файле
// (GET /file/{fileId})
func (_ Unimplemented) FileGet(w http.ResponseWriter, r *http.Request, fileId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновить файл
// (PUT /file/{fileId})
func (_ Unimplemented) FileUpdate(w http.ResponseWriter, r *http.Request, fileId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AuthLogin operation middleware
func (siw *ServerInterfaceWrapper) AuthLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AuthRefreshToken operation middleware
func (siw *ServerInterfaceWrapper) AuthRefreshToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthRefreshToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FileDownload operation middleware
func (siw *ServerInterfaceWrapper) FileDownload(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FileDownload(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FileUpload operation middleware
func (siw *ServerInterfaceWrapper) FileUpload(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params FileUploadParams

	// ------------- Required query parameter "filepath" -------------

	if paramValue := r.URL.Query().Get("filepath"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "filepath"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "filepath", r.URL.Query(), &params.Filepath)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filepath", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FileUpload(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FileDelete operation middleware
func (siw *ServerInterfaceWrapper) FileDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FileDelete(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FileGet operation middleware
func (siw *ServerInterfaceWrapper) FileGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FileGet(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FileUpdate operation middleware
func (siw *ServerInterfaceWrapper) FileUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FileUpdate(w, r, fileId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.AuthLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/refresh", wrapper.AuthRefreshToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/file/download/{fileId}", wrapper.FileDownload)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/file/upload", wrapper.FileUpload)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/file/{fileId}", wrapper.FileDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/file/{fileId}", wrapper.FileGet)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/file/{fileId}", wrapper.FileUpdate)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ3W7URhR+FWvaK2SyS6EX3TsopQrqBSogLkIuzHqSNd21zXhcFKKVkt20gBpBWyG1",
	"N21V0QcwaRZMwm5e4Zw3qs4Z74/X3uWnCwKUG7C9nplvzvm+8x1PNkU9aIWBL30didqmiOoN2XL48iul",
	"AkUXoQpCqbQn+XFLRpGzLulSb4RS1ESkleevi3bbHj4JbtyUdS3atrjgNeWyvxYU5/Fc+teVUV15ofYC",
	"X9SE51q4Awk8h0NIhD29gC0i744sDsMtSOAZvIAebpVO4PlarkvFEJW8FXtKuqK2QhhsEaumyGZeLeyA",
	"1pT1WHl64zKFxmC/eVvTfzeko6S6EKiWo0VNXLx2RdhT0OAxHEACTyHFDvSsi9euWLBnwTNI4F8YwCEM",
	"YA8OoGedjXUjUN4dhwbSO7gDA9yCF5DwyOviHK9mXY+r1dN1HXwnfb6U1wXBZ3CilmEab72hdSjatA8v",
	"S4P2dJN+odRYl3WgnHVpnb20LGzxvVSRwX1qqbpUpYgHofSd0BM1cZof2SJ0dIOjUHFi3ag0g3XP5/QG",
	"kS7mBv6ibWIX70ICPexwCLADA9o19C3Yh0N8aEECe/QUtyCl6OCPkEK6JBiA4qAsu6ImKEzf8IomkzLS",
	"5wJ3g9atB76WPkNwwrDp1XlU5WYU+GNmF3kYOlF0O1BuCaFtEUdS+U5rBtsnqTR60x7PWEKn3CitYskP",
	"ojDwIwPns2r1f2xGyTUlo8YVYkfphvSMX9qlUKe5jNtwBD28B31IZiSNHqcWHI2y3oM+pNCbyDkkSwTl",
	"TPVUCV3+gB7skZChjz/RMJ4DO9kt7EMCfXPDs3z+mvH6VMk1UROfVMZ1r5IVvYqpeGU7/xX62MUObjH+",
	"Pm1ygPcghSckbwu3GbHBneSqhqitrNoiilstR23QVD+Xx8wEbBeecUVgzZMweC4jtCy3c6T2JzyBPo9P",
	"sYO7C5Dat5N8WpTiXkLSKWHl3v6YFTWwYDBK4CFnbJy8TDHvguukwAOiB7P9IJPec2NaR7gFA9z+IJU3",
	"LY9xdI3K1rymrLjBbb8ZOG5lk26X3TZBX5e8v7w+yD/PZ29z1VdOS2qpIlFbKUjzd9inhbADKe5AStiN",
	"Bif6FZIgWSk7rLCFMR5hcIhpmtsToZ2m3upLJXCiciKfnbVhF3PD8yleheZrPnsNQwbY4VR0hC0a0nE5",
	"GJviS7PuyfNeFAaRZ4YXQvRbricawMGoYB1x9vf5l6fGUPAhpX6AP3Dv1x8/nOz+ZgeozWo6XYLiEdEb",
	"O9iFozHje3ifRWhl3cx0md61CMJ0ZeU3RtI9U7LYPwZsNrrPd/sjub+3AhtL6m8m8l0KBAkqC/6EnOKQ",
	"5THhWUURXQ1fSUJHDHOXrdLiCmVCPYAX2LXgCXYpdtjJEQN/oTI6xJXp61YsmeETAssk95oSm+WGrbip",
	"vdBRukKyOuk62pnnMQTg1TSYt0Ye92aWeGphzBp94ZWRa0hw7OaNbp+tLhka3Xvobu+4Onwxpzpgl6qe",
	"hdvYpZUIAOxhl7j+odSJR6N8p7MqxaTfurIpdcmHPjzm/v8QHxqh7wzrJ5eEHtmHBeksq8VuscllEzer",
	"LcLCh5bFtSgx5CZfepvWfmYudXK6m4S1JI49cCHczjhZYLY9u238WuoPrmN8Sw4xu4e0cJvE3J84CKMv",
	"1R6/NA5C75jICyLy+KTOULkYfHyQDz1tLIznH0WMivWUfeEDvA8pPB9NV16cr4aus+DiPP2Z/RYK9Ltu",
	"DG3RktoZTue4Ln9kOc1LuemKZxeFw+43PV15xb5vKvLHfd9HWUgKBy3jbi9/PpP9JWVltb3a/i8AAP//",
	"E4Lhh4oaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
