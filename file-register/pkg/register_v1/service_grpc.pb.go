// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: service.proto

package register_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegisterV1_AddFile_FullMethodName        = "/register_v1.RegisterV1/AddFile"
	RegisterV1_GetFile_FullMethodName        = "/register_v1.RegisterV1/GetFile"
	RegisterV1_FindFileByPath_FullMethodName = "/register_v1.RegisterV1/FindFileByPath"
	RegisterV1_UpdateFile_FullMethodName     = "/register_v1.RegisterV1/UpdateFile"
	RegisterV1_DeleteFile_FullMethodName     = "/register_v1.RegisterV1/DeleteFile"
)

// RegisterV1Client is the client API for RegisterV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterV1Client interface {
	AddFile(ctx context.Context, in *AddFileIn, opts ...grpc.CallOption) (*AddFileOut, error)
	GetFile(ctx context.Context, in *GetFileIn, opts ...grpc.CallOption) (*GetFileOut, error)
	FindFileByPath(ctx context.Context, in *FindFileByPathIn, opts ...grpc.CallOption) (*FindFileByPathOut, error)
	UpdateFile(ctx context.Context, in *UpdateFileIn, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFile(ctx context.Context, in *DeleteFileIn, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type registerV1Client struct {
	cc grpc.ClientConnInterface
}

func NewRegisterV1Client(cc grpc.ClientConnInterface) RegisterV1Client {
	return &registerV1Client{cc}
}

func (c *registerV1Client) AddFile(ctx context.Context, in *AddFileIn, opts ...grpc.CallOption) (*AddFileOut, error) {
	out := new(AddFileOut)
	err := c.cc.Invoke(ctx, RegisterV1_AddFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerV1Client) GetFile(ctx context.Context, in *GetFileIn, opts ...grpc.CallOption) (*GetFileOut, error) {
	out := new(GetFileOut)
	err := c.cc.Invoke(ctx, RegisterV1_GetFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerV1Client) FindFileByPath(ctx context.Context, in *FindFileByPathIn, opts ...grpc.CallOption) (*FindFileByPathOut, error) {
	out := new(FindFileByPathOut)
	err := c.cc.Invoke(ctx, RegisterV1_FindFileByPath_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerV1Client) UpdateFile(ctx context.Context, in *UpdateFileIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RegisterV1_UpdateFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerV1Client) DeleteFile(ctx context.Context, in *DeleteFileIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RegisterV1_DeleteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterV1Server is the server API for RegisterV1 service.
// All implementations must embed UnimplementedRegisterV1Server
// for forward compatibility
type RegisterV1Server interface {
	AddFile(context.Context, *AddFileIn) (*AddFileOut, error)
	GetFile(context.Context, *GetFileIn) (*GetFileOut, error)
	FindFileByPath(context.Context, *FindFileByPathIn) (*FindFileByPathOut, error)
	UpdateFile(context.Context, *UpdateFileIn) (*emptypb.Empty, error)
	DeleteFile(context.Context, *DeleteFileIn) (*emptypb.Empty, error)
	mustEmbedUnimplementedRegisterV1Server()
}

// UnimplementedRegisterV1Server must be embedded to have forward compatible implementations.
type UnimplementedRegisterV1Server struct {
}

func (UnimplementedRegisterV1Server) AddFile(context.Context, *AddFileIn) (*AddFileOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedRegisterV1Server) GetFile(context.Context, *GetFileIn) (*GetFileOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedRegisterV1Server) FindFileByPath(context.Context, *FindFileByPathIn) (*FindFileByPathOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileByPath not implemented")
}
func (UnimplementedRegisterV1Server) UpdateFile(context.Context, *UpdateFileIn) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedRegisterV1Server) DeleteFile(context.Context, *DeleteFileIn) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedRegisterV1Server) mustEmbedUnimplementedRegisterV1Server() {}

// UnsafeRegisterV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterV1Server will
// result in compilation errors.
type UnsafeRegisterV1Server interface {
	mustEmbedUnimplementedRegisterV1Server()
}

func RegisterRegisterV1Server(s grpc.ServiceRegistrar, srv RegisterV1Server) {
	s.RegisterService(&RegisterV1_ServiceDesc, srv)
}

func _RegisterV1_AddFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterV1Server).AddFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterV1_AddFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterV1Server).AddFile(ctx, req.(*AddFileIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterV1_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterV1Server).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterV1_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterV1Server).GetFile(ctx, req.(*GetFileIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterV1_FindFileByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileByPathIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterV1Server).FindFileByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterV1_FindFileByPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterV1Server).FindFileByPath(ctx, req.(*FindFileByPathIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterV1_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterV1Server).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterV1_UpdateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterV1Server).UpdateFile(ctx, req.(*UpdateFileIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterV1_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterV1Server).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterV1_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterV1Server).DeleteFile(ctx, req.(*DeleteFileIn))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterV1_ServiceDesc is the grpc.ServiceDesc for RegisterV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "register_v1.RegisterV1",
	HandlerType: (*RegisterV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFile",
			Handler:    _RegisterV1_AddFile_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _RegisterV1_GetFile_Handler,
		},
		{
			MethodName: "FindFileByPath",
			Handler:    _RegisterV1_FindFileByPath_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _RegisterV1_UpdateFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _RegisterV1_DeleteFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
