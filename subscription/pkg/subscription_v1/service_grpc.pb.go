// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: service.proto

package subscription_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SubscriptionV1_Subscribe_FullMethodName = "/register_v1.SubscriptionV1/Subscribe"
)

// SubscriptionV1Client is the client API for SubscriptionV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionV1Client interface {
	Subscribe(ctx context.Context, in *SubscribeIn, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type subscriptionV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionV1Client(cc grpc.ClientConnInterface) SubscriptionV1Client {
	return &subscriptionV1Client{cc}
}

func (c *subscriptionV1Client) Subscribe(ctx context.Context, in *SubscribeIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SubscriptionV1_Subscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionV1Server is the server API for SubscriptionV1 service.
// All implementations must embed UnimplementedSubscriptionV1Server
// for forward compatibility
type SubscriptionV1Server interface {
	Subscribe(context.Context, *SubscribeIn) (*emptypb.Empty, error)
	mustEmbedUnimplementedSubscriptionV1Server()
}

// UnimplementedSubscriptionV1Server must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionV1Server struct {
}

func (UnimplementedSubscriptionV1Server) Subscribe(context.Context, *SubscribeIn) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSubscriptionV1Server) mustEmbedUnimplementedSubscriptionV1Server() {}

// UnsafeSubscriptionV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionV1Server will
// result in compilation errors.
type UnsafeSubscriptionV1Server interface {
	mustEmbedUnimplementedSubscriptionV1Server()
}

func RegisterSubscriptionV1Server(s grpc.ServiceRegistrar, srv SubscriptionV1Server) {
	s.RegisterService(&SubscriptionV1_ServiceDesc, srv)
}

func _SubscriptionV1_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionV1Server).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionV1_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionV1Server).Subscribe(ctx, req.(*SubscribeIn))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionV1_ServiceDesc is the grpc.ServiceDesc for SubscriptionV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "register_v1.SubscriptionV1",
	HandlerType: (*SubscriptionV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _SubscriptionV1_Subscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
